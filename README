

CELLIBRIUM Project

This project expands on, and reworks, the latent AI/AR ideas that were
intoduced in CFEngine between 1998-2012, and were since abandoned for
the commercial activity. This work modifies and extends the concepts,
from Computer Immunology to Semantic Spacetimes, and embeds a mostly
compatible agent collection for users of CFEngine. Other agents will
be added in the future.

Promise Theory tells us that different observers looking onto a
partial system will build knowledge, tolerate perturbations, and
detect anomalies differently, depending on the promises they exchange
with it. The goal of Cellibrium is the create a cooperation that sews
together overlapping semantic coordinate patches into a traversable
network for reasoning.

The CELLIBRIUM (CELLular equilIBRIUM (cerebellum)) supports a model of
distributed embedded reasoning for use in IoT, Cloud, and Applications
centric computing, including Smart Cities. It merges inputs from
automated RobIoTs and from Anthropods of humans! It supports
workspaces, as described in http://markburgess.org/workspaces.html

Code here is based on research into Semantic Spaces, found at 
http://markburgess.org/spacetime.html

For now, think of this as an experimental proof of concept cognitive
computing model. Code mavens be warned, this is not intended as robust
production-style code; it is partly experimental, puts clarity of
intent ahead of edge-case nitpicking, because it is not yet always
clear exactly what the intent may be!

- Cellibrium
    -RobIoTs
       -CGNgine (derivative of CFEngine)
   -AnthropIoHs
       -LINGugine
- Percolibrium
    -Annealers
    -Narrators

Details to be shared gradually, for interested parties.

---

Build example on GNU/Linux:

# Build the cognitive management agent

You will need dependencies (check your system names): 
 - libtokyocabinet-dev
 - libssl-dev
 - libpcre-dev
 - flex
 - bison
 - automake
 - autoconf
 - libtool
 - C tools (gcc etc)

(cd RobIoTs/CGNgine; ./autogen --with-tokyocabinet --without-pam; make -j9)
(cd RobIoTs/CGNgine/cgn-keygen/cgn-keygen)

# You will need to compile a policy file and build graph data - e.g. the example provided
(cd RobIoTs/CGNgine; cgn-promises/cgn-promises -f ../CGNgineExample/promises.cf -g)

# Then create some monitoring data
(cd RobIoTs/CGNgine; cgn-monitord/cgn-monitord -f ../CGNgineExample/promises.cf)

# Then build the knowledge representation
(cd Percolibrium/Percolators/; make)
(cd Percolibrium/Narrators/; make)

Then see instructions:

cd Percolibrium/Narrators/
more README

